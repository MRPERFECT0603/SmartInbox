
const dotenv = require("dotenv"); 
const {responseGenerator} = require("../Controllers/RAG_AI_MODEL");
const Context = require("../Models/ContextModel");

dotenv.config();

/**
 * generateResponse - Function to generate a reply to an email using an AI model
 * This function makes a POST request to an API to generate a response based on the provided email content.
 ==================================>>>>>>
 * @param {string} emailContent - The content of the email to which a reply is to be generated
 * @returns {Promise<string>} - Returns a promise that resolves with the generated response from the AI model
 const generateResponse = async (emailContent, userName) => {
    try {
        const url = process.env.OLLAMA_API_KEY; 

        // Construct the AI prompt for the model
        const AiPrompt = emailContent; // Use the email content directly as defined in the Modelfile

        // Create the payload with the user's name
        const payload = {
            model: "otter", // Replace with the name of your created model
            prompt: AiPrompt,
            Name: userName, // Include user's name as part of the input
            stream: false,
            format: "json"
        };

        // Send the request to the Ollama API
        const response = await axios.post(url, payload);

        // Return the structured response from the assistant
        return response.data;
    } catch (error) {
        console.error('Error generating response:', error.message);
        throw new Error('Failed to generate response');
    }
};
======================================<<<<<
*/




/**
 * Generates a structured response for a given user and email content.
 *
 * This function acts as a wrapper around the `responseGenerator` function, handling any 
 * errors that may occur during the process and ensuring a structured response is returned.
 *
 * @async
 * @function generateResponse
 * @param {string} userName - The name of the user or sender.
 * @param {string} emailContent - The content of the email or query to respond to.
 * @returns {Promise<Object>} A structured response generated by the assistant, with fields such as:
 * - **subject**: The email's subject line.
 * - **greeting**: A personalized greeting.
 * - **body**: The main response content addressing the query.
 * - **signature**: The closing signature.
 *
 * @throws {Error} Throws an error if the `responseGenerator` function fails or encounters an issue.
 * 
 * @description
 * **Workflow:**
 * 1. Calls the `responseGenerator` function with the provided user name and email content.
 * 2. Logs the response to the console for debugging purposes.
 * 3. If an error occurs during the generation process, logs the error message and rethrows a new error.
 */
const generateResponse = async (userName, emailContent) => {
    try {
        
        const response = await responseGenerator(userName , emailContent);
        // console.log(response);
        return response;
    } catch (error) {
        console.error('Error generating response:', error.message);
        throw new Error('Failed to generate response');
    }
};


/**
 * Saves context data to the MongoDB database.
 *
 * This function extracts context-related data from the request body, validates the input, 
 * and saves the data to the `Context` collection in MongoDB. If any required fields are 
 * missing or an error occurs during the database operation, it responds with the appropriate 
 * HTTP status code and message.
 *
 * @async
 * @function saveContext
 * @param {Object} req - The HTTP request object.
 * @param {Object} req.body - The request body containing the context data.
 * @param {string} req.body.context - The context text to be saved.
 * @param {string} req.body.name - The name of the user providing the context.
 * @param {string} req.body.emailId - The email ID associated with the context.
 * @param {Object} res - The HTTP response object.
 * @returns {void} Sends an HTTP response:
 * - **200**: If the context is saved successfully.
 * - **400**: If any required fields are missing.
 * - **500**: If an error occurs during the save operation.
 *
 * @throws {Error} Logs the error and responds with a failure message in case of database issues.
 *
 * @description
 * **Workflow:**
 * 1. Extracts `context`, `name`, and `emailId` from the request body.
 * 2. Validates the presence of all required fields. If any are missing, responds with a 400 status.
 * 3. Creates a new `Context` document and saves it to MongoDB.
 * 4. Handles database errors by logging the issue and responding with a 500 status.
 */

const saveContext = async (req, res) => {
    const { context, name, emailId } = req.body; // Extract data from the request body
  
    if (!context || !name || !emailId) {
      return res.status(400).json({ message: "Missing required fields" });
    }
  
    try {
      const newContext = new Context({
        name,
        email: emailId,
        context,
      });
  
      await newContext.save(); 
  
      res.status(200).json({ message: "Context saved successfully" });
    } catch (error) {
      console.error("Error saving context:", error);
      res.status(500).json({ message: "Failed to save context" });
    }
};


module.exports = { generateResponse , saveContext };